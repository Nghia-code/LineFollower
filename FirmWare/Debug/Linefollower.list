
Linefollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000409c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080041d4  080041d4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d4  080041d4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080041dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000006c  08004248  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08004248  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8c3  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025f0  00000000  00000000  0002f958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  00032fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186c7  00000000  00000000  00033f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea33  00000000  00000000  0004c5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d7c6  00000000  00000000  0005b022  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e87e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000e8864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004190 	.word	0x08004190

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004190 	.word	0x08004190

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <PID_init>:
 */

#include "PID.h"

void PID_init(PID_t *pid, float dt, float out_max, float saturation)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]
	pid->dt = dt;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->out_max = out_max;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
	pid->I_saturation = saturation;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	619a      	str	r2, [r3, #24]
	PID_reset(pid);
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 f8da 	bl	800091a <PID_reset>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <PID_set_params>:

void PID_set_params(PID_t *pid, float Kp, float Ki, float Kd)
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	603b      	str	r3, [r7, #0]
	pid->Kp = Kp;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	609a      	str	r2, [r3, #8]
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <PID_update>:

float PID_update(PID_t *pid, float SP, float PV)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	pid->error = PV - SP;
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fcd4 	bl	8000154 <__aeabi_fsub>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	61da      	str	r2, [r3, #28]
	pid->P_part = pid->Kp * pid->error;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	4619      	mov	r1, r3
 80007be:	4610      	mov	r0, r2
 80007c0:	f7ff fdd2 	bl	8000368 <__aeabi_fmul>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	60da      	str	r2, [r3, #12]

	// Trapezoidal approximation
	pid->I_part += pid->Ki * (pid->error + pid->last_err) * pid->dt / 2;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	691c      	ldr	r4, [r3, #16]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	685d      	ldr	r5, [r3, #4]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	69da      	ldr	r2, [r3, #28]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6a1b      	ldr	r3, [r3, #32]
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f7ff fcba 	bl	8000158 <__addsf3>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4628      	mov	r0, r5
 80007ea:	f7ff fdbd 	bl	8000368 <__aeabi_fmul>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4610      	mov	r0, r2
 80007fa:	f7ff fdb5 	bl	8000368 <__aeabi_fmul>
 80007fe:	4603      	mov	r3, r0
 8000800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe63 	bl	80004d0 <__aeabi_fdiv>
 800080a:	4603      	mov	r3, r0
 800080c:	4619      	mov	r1, r3
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff fca2 	bl	8000158 <__addsf3>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	611a      	str	r2, [r3, #16]

	// Clamping integral
	if (pid->I_part > pid->I_saturation)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	691a      	ldr	r2, [r3, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f7ff ff5a 	bl	80006e0 <__aeabi_fcmpgt>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <PID_update+0xa4>
	{
		pid->I_part = pid->I_saturation;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	e012      	b.n	8000862 <PID_update+0xca>
	}
	else if (pid->I_part < -pid->I_saturation)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	691a      	ldr	r2, [r3, #16]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f7ff ff2a 	bl	80006a4 <__aeabi_fcmplt>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <PID_update+0xca>
	{
		pid->I_part = -pid->I_saturation;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	611a      	str	r2, [r3, #16]
	}

	pid->D_part = pid->Kd * (pid->error - pid->last_err) / pid->dt;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	689c      	ldr	r4, [r3, #8]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	69da      	ldr	r2, [r3, #28]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4619      	mov	r1, r3
 8000870:	4610      	mov	r0, r2
 8000872:	f7ff fc6f 	bl	8000154 <__aeabi_fsub>
 8000876:	4603      	mov	r3, r0
 8000878:	4619      	mov	r1, r3
 800087a:	4620      	mov	r0, r4
 800087c:	f7ff fd74 	bl	8000368 <__aeabi_fmul>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	4619      	mov	r1, r3
 800088a:	4610      	mov	r0, r2
 800088c:	f7ff fe20 	bl	80004d0 <__aeabi_fdiv>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	615a      	str	r2, [r3, #20]

	// Update state
	pid->last_err = pid->error;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	621a      	str	r2, [r3, #32]

	// Calculate output
	pid->out = pid->P_part + pid->I_part + pid->D_part;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f7ff fc54 	bl	8000158 <__addsf3>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4610      	mov	r0, r2
 80008bc:	f7ff fc4c 	bl	8000158 <__addsf3>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
	if (pid->out > pid->out_max)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4610      	mov	r0, r2
 80008d4:	f7ff ff04 	bl	80006e0 <__aeabi_fcmpgt>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <PID_update+0x150>
	{
		pid->out = pid->out_max;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
 80008e6:	e012      	b.n	800090e <PID_update+0x176>
	}
	else if (pid->out < -pid->out_max)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80008f4:	4619      	mov	r1, r3
 80008f6:	4610      	mov	r0, r2
 80008f8:	f7ff fed4 	bl	80006a4 <__aeabi_fcmplt>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <PID_update+0x176>
	{
		pid->out = -pid->out_max;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000906:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return pid->out;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bdb0      	pop	{r4, r5, r7, pc}

0800091a <PID_reset>:

void PID_reset(PID_t *pid)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	pid->Kp = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
	pid->Ki = 0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
	pid->Kd = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <PID_ReadValue>:

float PID_ReadValue (PID_t* PID_parameter){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	return PID_parameter->out;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
	...

0800095c <read_sensor>:

int sensor[5];
int error;

uint8_t read_sensor(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	  sensor[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000964:	488d      	ldr	r0, [pc, #564]	; (8000b9c <read_sensor+0x240>)
 8000966:	f001 fb4b 	bl	8002000 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <read_sensor+0x244>)
 8000970:	601a      	str	r2, [r3, #0]
	  sensor[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000972:	2108      	movs	r1, #8
 8000974:	488b      	ldr	r0, [pc, #556]	; (8000ba4 <read_sensor+0x248>)
 8000976:	f001 fb43 	bl	8002000 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	4b88      	ldr	r3, [pc, #544]	; (8000ba0 <read_sensor+0x244>)
 8000980:	605a      	str	r2, [r3, #4]
	  sensor[2] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	4888      	ldr	r0, [pc, #544]	; (8000ba8 <read_sensor+0x24c>)
 8000988:	f001 fb3a 	bl	8002000 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b83      	ldr	r3, [pc, #524]	; (8000ba0 <read_sensor+0x244>)
 8000992:	609a      	str	r2, [r3, #8]
	  sensor[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000994:	2110      	movs	r1, #16
 8000996:	4883      	ldr	r0, [pc, #524]	; (8000ba4 <read_sensor+0x248>)
 8000998:	f001 fb32 	bl	8002000 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b7f      	ldr	r3, [pc, #508]	; (8000ba0 <read_sensor+0x244>)
 80009a2:	60da      	str	r2, [r3, #12]
	  sensor[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80009a4:	2120      	movs	r1, #32
 80009a6:	487f      	ldr	r0, [pc, #508]	; (8000ba4 <read_sensor+0x248>)
 80009a8:	f001 fb2a 	bl	8002000 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b7b      	ldr	r3, [pc, #492]	; (8000ba0 <read_sensor+0x244>)
 80009b2:	611a      	str	r2, [r3, #16]

	  //if only middle sensor detects black line
	  if (sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 0 && sensor[3] == 1 && sensor[4] == 1)
 80009b4:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <read_sensor+0x244>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d113      	bne.n	80009e4 <read_sensor+0x88>
 80009bc:	4b78      	ldr	r3, [pc, #480]	; (8000ba0 <read_sensor+0x244>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10f      	bne.n	80009e4 <read_sensor+0x88>
 80009c4:	4b76      	ldr	r3, [pc, #472]	; (8000ba0 <read_sensor+0x244>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10b      	bne.n	80009e4 <read_sensor+0x88>
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <read_sensor+0x244>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d107      	bne.n	80009e4 <read_sensor+0x88>
 80009d4:	4b72      	ldr	r3, [pc, #456]	; (8000ba0 <read_sensor+0x244>)
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d103      	bne.n	80009e4 <read_sensor+0x88>
		  error = 0;
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <read_sensor+0x250>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e101      	b.n	8000be8 <read_sensor+0x28c>
	  //going forward with full speed [1 1 0 1 1] - 0


	  //if only left sensor detects black line
	  else if (sensor[0] == 1 && sensor[1] == 0 && sensor[2] == 1 && sensor[3] == 1 && sensor[4] == 1)
 80009e4:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <read_sensor+0x244>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d114      	bne.n	8000a16 <read_sensor+0xba>
 80009ec:	4b6c      	ldr	r3, [pc, #432]	; (8000ba0 <read_sensor+0x244>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d110      	bne.n	8000a16 <read_sensor+0xba>
 80009f4:	4b6a      	ldr	r3, [pc, #424]	; (8000ba0 <read_sensor+0x244>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10c      	bne.n	8000a16 <read_sensor+0xba>
 80009fc:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <read_sensor+0x244>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d108      	bne.n	8000a16 <read_sensor+0xba>
 8000a04:	4b66      	ldr	r3, [pc, #408]	; (8000ba0 <read_sensor+0x244>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d104      	bne.n	8000a16 <read_sensor+0xba>
		  error = -1;
 8000a0c:	4b67      	ldr	r3, [pc, #412]	; (8000bac <read_sensor+0x250>)
 8000a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e0e8      	b.n	8000be8 <read_sensor+0x28c>
	  //going right with full speed [1 0 1 1 1] - (-1)


	  //if only left most sensor detects black line
	  else if (sensor[0] == 0 && sensor[1] == 1 && sensor[2] == 1 && sensor[3] == 1 && sensor[4] == 1)
 8000a16:	4b62      	ldr	r3, [pc, #392]	; (8000ba0 <read_sensor+0x244>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d114      	bne.n	8000a48 <read_sensor+0xec>
 8000a1e:	4b60      	ldr	r3, [pc, #384]	; (8000ba0 <read_sensor+0x244>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d110      	bne.n	8000a48 <read_sensor+0xec>
 8000a26:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <read_sensor+0x244>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d10c      	bne.n	8000a48 <read_sensor+0xec>
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <read_sensor+0x244>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <read_sensor+0xec>
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <read_sensor+0x244>)
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <read_sensor+0xec>
		  error = -4;
 8000a3e:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <read_sensor+0x250>)
 8000a40:	f06f 0203 	mvn.w	r2, #3
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e0cf      	b.n	8000be8 <read_sensor+0x28c>
	  //going right with full speed [0 1 1 1 1] - (-5)


	  //if only right sensor detects black line
	  else if(sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 1 && sensor[3] == 0 && sensor[4] ==1)
 8000a48:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <read_sensor+0x244>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d113      	bne.n	8000a78 <read_sensor+0x11c>
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <read_sensor+0x244>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10f      	bne.n	8000a78 <read_sensor+0x11c>
 8000a58:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <read_sensor+0x244>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d10b      	bne.n	8000a78 <read_sensor+0x11c>
 8000a60:	4b4f      	ldr	r3, [pc, #316]	; (8000ba0 <read_sensor+0x244>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <read_sensor+0x11c>
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <read_sensor+0x244>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d103      	bne.n	8000a78 <read_sensor+0x11c>
		  error = 1;
 8000a70:	4b4e      	ldr	r3, [pc, #312]	; (8000bac <read_sensor+0x250>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e0b7      	b.n	8000be8 <read_sensor+0x28c>
	  //going left with full speed [1 1 1 0 1] ---- (1)


	  //if only right most sensor detects black line
	  else if(sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 1 && sensor[3] == 1 && sensor[4] == 0)
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <read_sensor+0x244>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d113      	bne.n	8000aa8 <read_sensor+0x14c>
 8000a80:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <read_sensor+0x244>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10f      	bne.n	8000aa8 <read_sensor+0x14c>
 8000a88:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <read_sensor+0x244>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10b      	bne.n	8000aa8 <read_sensor+0x14c>
 8000a90:	4b43      	ldr	r3, [pc, #268]	; (8000ba0 <read_sensor+0x244>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <read_sensor+0x14c>
 8000a98:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <read_sensor+0x244>)
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <read_sensor+0x14c>
	   	  error = 4;
 8000aa0:	4b42      	ldr	r3, [pc, #264]	; (8000bac <read_sensor+0x250>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e09f      	b.n	8000be8 <read_sensor+0x28c>
	  //going left with full speed [1 1 1 1 0] ---- (5)


	  //if middle and right sensor detects black line
	  else if(sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 0 && sensor[3] == 0 && sensor[4] == 1)
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <read_sensor+0x244>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d113      	bne.n	8000ad8 <read_sensor+0x17c>
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <read_sensor+0x244>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d10f      	bne.n	8000ad8 <read_sensor+0x17c>
 8000ab8:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <read_sensor+0x244>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10b      	bne.n	8000ad8 <read_sensor+0x17c>
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <read_sensor+0x244>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d107      	bne.n	8000ad8 <read_sensor+0x17c>
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <read_sensor+0x244>)
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d103      	bne.n	8000ad8 <read_sensor+0x17c>
	 	  error = 2;
 8000ad0:	4b36      	ldr	r3, [pc, #216]	; (8000bac <read_sensor+0x250>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e087      	b.n	8000be8 <read_sensor+0x28c>
	  //going left with full speed [1 1 0 0 1] ---- (2)


	  //if middle and left sensor detects black line
	  else if(sensor[0] == 1 && sensor[1] == 0 && sensor[2] == 0 && sensor[3] == 1 && sensor[4] == 1)
 8000ad8:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <read_sensor+0x244>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d114      	bne.n	8000b0a <read_sensor+0x1ae>
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <read_sensor+0x244>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d110      	bne.n	8000b0a <read_sensor+0x1ae>
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <read_sensor+0x244>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10c      	bne.n	8000b0a <read_sensor+0x1ae>
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <read_sensor+0x244>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d108      	bne.n	8000b0a <read_sensor+0x1ae>
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <read_sensor+0x244>)
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d104      	bne.n	8000b0a <read_sensor+0x1ae>
		  error = -2;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <read_sensor+0x250>)
 8000b02:	f06f 0201 	mvn.w	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e06e      	b.n	8000be8 <read_sensor+0x28c>
	  //going right with full speed [1 0 0 1 1] ---- (-2)


	  //if middle, left and left most sensor detects black line
	  else if(sensor[0] == 0 && sensor[1] == 0 && sensor[2] == 0 && sensor[3] == 1 && sensor[4] == 1)
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <read_sensor+0x244>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d114      	bne.n	8000b3c <read_sensor+0x1e0>
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <read_sensor+0x244>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d110      	bne.n	8000b3c <read_sensor+0x1e0>
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <read_sensor+0x244>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10c      	bne.n	8000b3c <read_sensor+0x1e0>
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <read_sensor+0x244>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d108      	bne.n	8000b3c <read_sensor+0x1e0>
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <read_sensor+0x244>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d104      	bne.n	8000b3c <read_sensor+0x1e0>
		 error = -3;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <read_sensor+0x250>)
 8000b34:	f06f 0202 	mvn.w	r2, #2
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e055      	b.n	8000be8 <read_sensor+0x28c>
	  //going right with full speed [0 0 0 1 1] ---- (-3)


	  //if middle, right and right most sensor detects black line
	  else if(sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 0 && sensor[3] == 0 && sensor[4] == 0)
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <read_sensor+0x244>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d113      	bne.n	8000b6c <read_sensor+0x210>
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <read_sensor+0x244>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10f      	bne.n	8000b6c <read_sensor+0x210>
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <read_sensor+0x244>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <read_sensor+0x210>
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <read_sensor+0x244>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <read_sensor+0x210>
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <read_sensor+0x244>)
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d103      	bne.n	8000b6c <read_sensor+0x210>
		  error = 3;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <read_sensor+0x250>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e03d      	b.n	8000be8 <read_sensor+0x28c>
	  //going left with full speed [1 1 0 0 0] ---- (3)

	  else if(sensor[0] == 0 && sensor[1] == 0 && sensor[2] == 1 && sensor[3] == 1 && sensor[4] == 1)
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <read_sensor+0x244>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d11d      	bne.n	8000bb0 <read_sensor+0x254>
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <read_sensor+0x244>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d119      	bne.n	8000bb0 <read_sensor+0x254>
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <read_sensor+0x244>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d115      	bne.n	8000bb0 <read_sensor+0x254>
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <read_sensor+0x244>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d111      	bne.n	8000bb0 <read_sensor+0x254>
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <read_sensor+0x244>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10d      	bne.n	8000bb0 <read_sensor+0x254>
	  		  error = 3;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <read_sensor+0x250>)
 8000b96:	2203      	movs	r2, #3
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e025      	b.n	8000be8 <read_sensor+0x28c>
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000094 	.word	0x20000094
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	20000088 	.word	0x20000088
	  // [0 0 1 1 1} --- (4)

	  else if(sensor[0] == 1 && sensor[1] == 1 && sensor[2] == 1 && sensor[3] == 0 && sensor[4] == 0)
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <read_sensor+0x298>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d113      	bne.n	8000be0 <read_sensor+0x284>
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <read_sensor+0x298>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10f      	bne.n	8000be0 <read_sensor+0x284>
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <read_sensor+0x298>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10b      	bne.n	8000be0 <read_sensor+0x284>
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <read_sensor+0x298>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d107      	bne.n	8000be0 <read_sensor+0x284>
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <read_sensor+0x298>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d103      	bne.n	8000be0 <read_sensor+0x284>
	  		  error = 3;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <read_sensor+0x29c>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e003      	b.n	8000be8 <read_sensor+0x28c>
	  // [1 1 1 0 0] --- (-4)
	  else
		  error = -6 ;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <read_sensor+0x29c>)
 8000be2:	f06f 0205 	mvn.w	r2, #5
 8000be6:	601a      	str	r2, [r3, #0]

	  return error;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <read_sensor+0x29c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	20000088 	.word	0x20000088

08000bfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_ADC1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c3a:	f000 fcf9 	bl	8001630 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 fa36 	bl	80010b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c5a:	f000 fdc1 	bl	80017e0 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 fa26 	bl	80010b4 <Error_Handler>
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000a8 	.word	0x200000a8
 8000c74:	40012400 	.word	0x40012400

08000c78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_ADC_MspInit+0x6c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d121      	bne.n	8000cdc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cc8:	23e0      	movs	r3, #224	; 0xe0
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_ADC_MspInit+0x74>)
 8000cd8:	f001 f838 	bl	8001d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012400 	.word	0x40012400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a3a      	ldr	r2, [pc, #232]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a34      	ldr	r2, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a2e      	ldr	r2, [pc, #184]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f641 4103 	movw	r1, #7171	; 0x1c03
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000d54:	f001 f96b 	bl	800202e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000d5e:	4827      	ldr	r0, [pc, #156]	; (8000dfc <MX_GPIO_Init+0x10c>)
 8000d60:	f001 f965 	bl	800202e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC15 */
  GPIO_InitStruct.Pin = Sensor3_Pin|GPIO_PIN_15;
 8000d64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4821      	ldr	r0, [pc, #132]	; (8000e00 <MX_GPIO_Init+0x110>)
 8000d7a:	f000 ffe7 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000d7e:	f641 4303 	movw	r3, #7171	; 0x1c03
 8000d82:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000d98:	f000 ffd8 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x10c>)
 8000db6:	f000 ffc9 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor1_Pin;
 8000dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Sensor1_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <MX_GPIO_Init+0x10c>)
 8000dd0:	f000 ffbc 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Sensor2_Pin|Sensor4_Pin|Sensor5_Pin;
 8000dd4:	2338      	movs	r3, #56	; 0x38
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000de8:	f000 ffb0 	bl	8001d4c <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40011000 	.word	0x40011000

08000e04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_I2C1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_I2C1_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e42:	f001 f90d 	bl	8002060 <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f932 	bl	80010b4 <Error_Handler>
  }

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000d8 	.word	0x200000d8
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x70>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e98:	23c0      	movs	r3, #192	; 0xc0
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_I2C_MspInit+0x78>)
 8000eac:	f000 ff4e 	bl	8001d4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_I2C_MspInit+0x74>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fb44 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f842 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f7ff ff02 	bl	8000cf0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000eec:	f000 fa38 	bl	8001360 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ef0:	f7ff fe84 	bl	8000bfc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ef4:	f7ff ff86 	bl	8000e04 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ef8:	f000 fa5c 	bl	80013b4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000efc:	f000 f956 	bl	80011ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  PID_init(&PID_LEFT, (float)30, (float)80, (float)100);
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <main+0x70>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <main+0x74>)
 8000f04:	4913      	ldr	r1, [pc, #76]	; (8000f54 <main+0x78>)
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <main+0x7c>)
 8000f08:	f7ff fc1a 	bl	8000740 <PID_init>
  PID_init(&PID_RIGHT, (float)30, (float)80, (float)100);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <main+0x70>)
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <main+0x74>)
 8000f10:	4910      	ldr	r1, [pc, #64]	; (8000f54 <main+0x78>)
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <main+0x80>)
 8000f14:	f7ff fc14 	bl	8000740 <PID_init>
  PID_set_params(&PID_LEFT, (float)10, (float)0.01, (float)0);
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <main+0x84>)
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <main+0x88>)
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0x7c>)
 8000f22:	f7ff fc24 	bl	800076e <PID_set_params>
  PID_set_params(&PID_RIGHT, (float)10, (float)0.01, (float)0);
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <main+0x84>)
 8000f2c:	490d      	ldr	r1, [pc, #52]	; (8000f64 <main+0x88>)
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <main+0x80>)
 8000f30:	f7ff fc1d 	bl	800076e <PID_set_params>

  HAL_TIM_Base_Start_IT(&htim4);
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <main+0x8c>)
 8000f36:	f001 feed 	bl	8002d14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <main+0x8c>)
 8000f3e:	f001 ff93 	bl	8002e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f42:	210c      	movs	r1, #12
 8000f44:	4808      	ldr	r0, [pc, #32]	; (8000f68 <main+0x8c>)
 8000f46:	f001 ff8f 	bl	8002e68 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <main+0x6e>
 8000f4c:	42c80000 	.word	0x42c80000
 8000f50:	42a00000 	.word	0x42a00000
 8000f54:	41f00000 	.word	0x41f00000
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000030 	.word	0x20000030
 8000f60:	3c23d70a 	.word	0x3c23d70a
 8000f64:	41200000 	.word	0x41200000
 8000f68:	2000012c 	.word	0x2000012c

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f76:	2228      	movs	r2, #40	; 0x28
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f900 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fac:	2300      	movs	r3, #0
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f989 	bl	80022d0 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f876 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fbf3 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ff0:	f000 f860 	bl	80010b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fd82 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800100a:	f000 f853 	bl	80010b4 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim4.Instance){
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d133      	bne.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x7c>
		error = read_sensor();
 800102c:	f7ff fc96 	bl	800095c <read_sensor>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001036:	601a      	str	r2, [r3, #0]

		read_sensor();
 8001038:	f7ff fc90 	bl	800095c <read_sensor>


		PID_update(&PID_LEFT, 0 , error);
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f93d 	bl	80002c0 <__aeabi_i2f>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	f04f 0100 	mov.w	r1, #0
 800104e:	4815      	ldr	r0, [pc, #84]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001050:	f7ff fba2 	bl	8000798 <PID_update>
		PID_update(&PID_RIGHT, 0 , error);
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f931 	bl	80002c0 <__aeabi_i2f>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	f04f 0100 	mov.w	r1, #0
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001068:	f7ff fb96 	bl	8000798 <PID_update>
		R_motor_speed =  PID_ReadValue(&PID_LEFT);
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800106e:	f7ff fc69 	bl	8000944 <PID_ReadValue>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fb3d 	bl	80006f4 <__aeabi_f2iz>
 800107a:	4602      	mov	r2, r0
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x94>)
 800107e:	601a      	str	r2, [r3, #0]
		L_motor_speed =  PID_ReadValue(&PID_RIGHT);
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001082:	f7ff fc5f 	bl	8000944 <PID_ReadValue>
 8001086:	4603      	mov	r3, r0
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fb33 	bl	80006f4 <__aeabi_f2iz>
 800108e:	4602      	mov	r2, r0
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001092:	601a      	str	r2, [r3, #0]
//		go_straight_ahead();

	}
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000012c 	.word	0x2000012c
 80010a0:	20000088 	.word	0x20000088
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000030 	.word	0x20000030
 80010ac:	2000008c 	.word	0x2000008c
 80010b0:	20000090 	.word	0x20000090

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_MspInit+0x5c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x5c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_MspInit+0x60>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_MspInit+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <HardFault_Handler+0x4>

08001136 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <BusFault_Handler+0x4>

08001142 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 fa42 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM4_IRQHandler+0x10>)
 800117e:	f001 ff15 	bl	8002fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000012c 	.word	0x2000012c

0800118c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <USART1_IRQHandler+0x10>)
 8001192:	f002 fd0f 	bl	8003bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000174 	.word	0x20000174

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011de:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <MX_TIM4_Init+0xfc>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011f0:	2263      	movs	r2, #99	; 0x63
 80011f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <MX_TIM4_Init+0xf8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <MX_TIM4_Init+0xf8>)
 8001202:	f001 fd37 	bl	8002c74 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800120c:	f7ff ff52 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	4619      	mov	r1, r3
 800121c:	4821      	ldr	r0, [pc, #132]	; (80012a4 <MX_TIM4_Init+0xf8>)
 800121e:	f002 f88b 	bl	8003338 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001228:	f7ff ff44 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800122c:	481d      	ldr	r0, [pc, #116]	; (80012a4 <MX_TIM4_Init+0xf8>)
 800122e:	f001 fdc3 	bl	8002db8 <HAL_TIM_PWM_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001238:	f7ff ff3c 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4619      	mov	r1, r3
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <MX_TIM4_Init+0xf8>)
 800124c:	f002 fbf4 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001256:	f7ff ff2d 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125a:	2360      	movs	r3, #96	; 0x60
 800125c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2208      	movs	r2, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <MX_TIM4_Init+0xf8>)
 8001272:	f001 ffa3 	bl	80031bc <HAL_TIM_PWM_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800127c:	f7ff ff1a 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	220c      	movs	r2, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM4_Init+0xf8>)
 8001288:	f001 ff98 	bl	80031bc <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001292:	f7ff ff0f 	bl	80010b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM4_Init+0xf8>)
 8001298:	f000 f82e 	bl	80012f8 <HAL_TIM_MspPostInit>

}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000012c 	.word	0x2000012c
 80012a8:	40000800 	.word	0x40000800

080012ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x44>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d113      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_TIM_Base_MspInit+0x48>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x48>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_TIM_Base_MspInit+0x48>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	201e      	movs	r0, #30
 80012dc:	f000 fc89 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012e0:	201e      	movs	r0, #30
 80012e2:	f000 fca2 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40000800 	.word	0x40000800
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_TIM_MspPostInit+0x5c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d118      	bne.n	800134a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_TIM_MspPostInit+0x60>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_TIM_MspPostInit+0x60>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_TIM_MspPostInit+0x60>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001330:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_TIM_MspPostInit+0x64>)
 8001346:	f000 fd01 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000800 	.word	0x40000800
 8001358:	40021000 	.word	0x40021000
 800135c:	40010c00 	.word	0x40010c00

08001360 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART1_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001398:	f002 fbbe 	bl	8003b18 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f7ff fe87 	bl	80010b4 <Error_Handler>
  }

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000174 	.word	0x20000174
 80013b0:	40013800 	.word	0x40013800

080013b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART2_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ec:	f002 fb94 	bl	8003b18 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f7ff fe5d 	bl	80010b4 <Error_Handler>
  }

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001b4 	.word	0x200001b4
 8001404:	40004400 	.word	0x40004400

08001408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a3b      	ldr	r2, [pc, #236]	; (8001510 <HAL_UART_MspInit+0x108>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d13a      	bne.n	800149e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_UART_MspInit+0x10c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a39      	ldr	r2, [pc, #228]	; (8001514 <HAL_UART_MspInit+0x10c>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_UART_MspInit+0x10c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_UART_MspInit+0x10c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a33      	ldr	r2, [pc, #204]	; (8001514 <HAL_UART_MspInit+0x10c>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_UART_MspInit+0x10c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4619      	mov	r1, r3
 800146c:	482a      	ldr	r0, [pc, #168]	; (8001518 <HAL_UART_MspInit+0x110>)
 800146e:	f000 fc6d 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4619      	mov	r1, r3
 8001486:	4824      	ldr	r0, [pc, #144]	; (8001518 <HAL_UART_MspInit+0x110>)
 8001488:	f000 fc60 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2025      	movs	r0, #37	; 0x25
 8001492:	f000 fbae 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001496:	2025      	movs	r0, #37	; 0x25
 8001498:	f000 fbc7 	bl	8001c2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800149c:	e034      	b.n	8001508 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_UART_MspInit+0x114>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d12f      	bne.n	8001508 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b2:	61d3      	str	r3, [r2, #28]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_UART_MspInit+0x10c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d8:	2304      	movs	r3, #4
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_UART_MspInit+0x110>)
 80014ec:	f000 fc2e 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f0:	2308      	movs	r3, #8
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_MspInit+0x110>)
 8001504:	f000 fc22 	bl	8001d4c <HAL_GPIO_Init>
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013800 	.word	0x40013800
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40004400 	.word	0x40004400

08001520 <Reset_Handler>:
 8001520:	2100      	movs	r1, #0
 8001522:	e003      	b.n	800152c <LoopCopyDataInit>

08001524 <CopyDataInit>:
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <LoopFillZerobss+0x14>)
 8001526:	585b      	ldr	r3, [r3, r1]
 8001528:	5043      	str	r3, [r0, r1]
 800152a:	3104      	adds	r1, #4

0800152c <LoopCopyDataInit>:
 800152c:	480a      	ldr	r0, [pc, #40]	; (8001558 <LoopFillZerobss+0x18>)
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <LoopFillZerobss+0x1c>)
 8001530:	1842      	adds	r2, r0, r1
 8001532:	429a      	cmp	r2, r3
 8001534:	d3f6      	bcc.n	8001524 <CopyDataInit>
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x20>)
 8001538:	e002      	b.n	8001540 <LoopFillZerobss>

0800153a <FillZerobss>:
 800153a:	2300      	movs	r3, #0
 800153c:	f842 3b04 	str.w	r3, [r2], #4

08001540 <LoopFillZerobss>:
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <LoopFillZerobss+0x24>)
 8001542:	429a      	cmp	r2, r3
 8001544:	d3f9      	bcc.n	800153a <FillZerobss>
 8001546:	f7ff fe2b 	bl	80011a0 <SystemInit>
 800154a:	f002 fdf5 	bl	8004138 <__libc_init_array>
 800154e:	f7ff fcc5 	bl	8000edc <main>
 8001552:	4770      	bx	lr
 8001554:	080041dc 	.word	0x080041dc
 8001558:	20000000 	.word	0x20000000
 800155c:	2000006c 	.word	0x2000006c
 8001560:	2000006c 	.word	0x2000006c
 8001564:	200001f8 	.word	0x200001f8

08001568 <ADC1_2_IRQHandler>:
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 fb2d 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fd9a 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fb45 	bl	8001c46 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 fb0d 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000060 	.word	0x20000060
 80015f0:	20000068 	.word	0x20000068
 80015f4:	20000064 	.word	0x20000064

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000068 	.word	0x20000068
 8001618:	200001f4 	.word	0x200001f4

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	200001f4 	.word	0x200001f4

08001630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0be      	b.n	80017d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d109      	bne.n	8001674 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fb02 	bl	8000c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9ab 	bl	80019d0 <ADC_ConversionStop_Disable>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8099 	bne.w	80017be <HAL_ADC_Init+0x18e>
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8095 	bne.w	80017be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169c:	f023 0302 	bic.w	r3, r3, #2
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_Init+0xa2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <HAL_ADC_Init+0xa8>
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	e000      	b.n	80016da <HAL_ADC_Init+0xaa>
 80016d8:	2300      	movs	r3, #0
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7d1b      	ldrb	r3, [r3, #20]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d119      	bne.n	800171c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7b1b      	ldrb	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	035a      	lsls	r2, r3, #13
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e00b      	b.n	800171c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_ADC_Init+0x1a8>)
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174c:	d003      	beq.n	8001756 <HAL_ADC_Init+0x126>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d104      	bne.n	8001760 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	3b01      	subs	r3, #1
 800175c:	051b      	lsls	r3, r3, #20
 800175e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	430a      	orrs	r2, r1
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_ADC_Init+0x1ac>)
 800177c:	4013      	ands	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d10b      	bne.n	800179c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800179a:	e018      	b.n	80017ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f023 0312 	bic.w	r3, r3, #18
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017bc:	e007      	b.n	80017ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	ffe1f7fd 	.word	0xffe1f7fd
 80017dc:	ff1f0efe 	.word	0xff1f0efe

080017e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x20>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0dc      	b.n	80019ba <HAL_ADC_ConfigChannel+0x1da>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b06      	cmp	r3, #6
 800180e:	d81c      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b05      	subs	r3, #5
 8001822:	221f      	movs	r2, #31
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b05      	subs	r3, #5
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
 8001848:	e03c      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d81c      	bhi.n	800188c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b23      	subs	r3, #35	; 0x23
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	4019      	ands	r1, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b23      	subs	r3, #35	; 0x23
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
 800188a:	e01b      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	3b41      	subs	r3, #65	; 0x41
 800189e:	221f      	movs	r2, #31
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4019      	ands	r1, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b41      	subs	r3, #65	; 0x41
 80018b8:	fa00 f203 	lsl.w	r2, r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d91c      	bls.n	8001906 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4019      	ands	r1, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6898      	ldr	r0, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e019      	b.n	800193a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	2207      	movs	r2, #7
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b10      	cmp	r3, #16
 8001940:	d003      	beq.n	800194a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001946:	2b11      	cmp	r3, #17
 8001948:	d132      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d125      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d126      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001970:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d11a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_ADC_ConfigChannel+0x1ec>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9a      	lsrs	r2, r3, #18
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001990:	e002      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3b01      	subs	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f9      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1b2>
 800199e:	e007      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012400 	.word	0x40012400
 80019c8:	20000060 	.word	0x20000060
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d127      	bne.n	8001a3a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019fa:	f7ff fe0f 	bl	800161c <HAL_GetTick>
 80019fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a00:	e014      	b.n	8001a2c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a02:	f7ff fe0b 	bl	800161c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d90d      	bls.n	8001a2c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e007      	b.n	8001a3c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d0e3      	beq.n	8001a02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <__NVIC_EnableIRQ+0x34>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff90 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff2d 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff42 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff90 	bl	8001b34 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5f 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff35 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e051      	b.n	8001d26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 020e 	bic.w	r2, r2, #14
 8001c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_DMA_Abort_IT+0xd0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d029      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xa0>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_DMA_Abort_IT+0xd4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x9c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_DMA_Abort_IT+0xd8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01a      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0x96>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_DMA_Abort_IT+0xdc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d012      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x90>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_DMA_Abort_IT+0xe0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00a      	beq.n	8001cea <HAL_DMA_Abort_IT+0x8a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <HAL_DMA_Abort_IT+0xe4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d102      	bne.n	8001ce4 <HAL_DMA_Abort_IT+0x84>
 8001cde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ce2:	e00e      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce8:	e00b      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cee:	e008      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	e005      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	e002      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	e000      	b.n	8001d02 <HAL_DMA_Abort_IT+0xa2>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_DMA_Abort_IT+0xe8>)
 8001d04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
    } 
  }
  return status;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40020008 	.word	0x40020008
 8001d34:	4002001c 	.word	0x4002001c
 8001d38:	40020030 	.word	0x40020030
 8001d3c:	40020044 	.word	0x40020044
 8001d40:	40020058 	.word	0x40020058
 8001d44:	4002006c 	.word	0x4002006c
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b08b      	sub	sp, #44	; 0x2c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	e127      	b.n	8001fb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d60:	2201      	movs	r2, #1
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8116 	bne.w	8001faa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d034      	beq.n	8001df0 <HAL_GPIO_Init+0xa4>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d80d      	bhi.n	8001da6 <HAL_GPIO_Init+0x5a>
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d02b      	beq.n	8001de6 <HAL_GPIO_Init+0x9a>
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d804      	bhi.n	8001d9c <HAL_GPIO_Init+0x50>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d031      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d01c      	beq.n	8001dd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d9a:	e048      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d043      	beq.n	8001e28 <HAL_GPIO_Init+0xdc>
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d01b      	beq.n	8001ddc <HAL_GPIO_Init+0x90>
          break;
 8001da4:	e043      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001da6:	4a89      	ldr	r2, [pc, #548]	; (8001fcc <HAL_GPIO_Init+0x280>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d026      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
 8001dac:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_GPIO_Init+0x280>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d806      	bhi.n	8001dc0 <HAL_GPIO_Init+0x74>
 8001db2:	4a87      	ldr	r2, [pc, #540]	; (8001fd0 <HAL_GPIO_Init+0x284>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d020      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
 8001db8:	4a86      	ldr	r2, [pc, #536]	; (8001fd4 <HAL_GPIO_Init+0x288>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
          break;
 8001dbe:	e036      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dc0:	4a85      	ldr	r2, [pc, #532]	; (8001fd8 <HAL_GPIO_Init+0x28c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
 8001dc6:	4a85      	ldr	r2, [pc, #532]	; (8001fdc <HAL_GPIO_Init+0x290>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d016      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
 8001dcc:	4a84      	ldr	r2, [pc, #528]	; (8001fe0 <HAL_GPIO_Init+0x294>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0xae>
          break;
 8001dd2:	e02c      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e028      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	3304      	adds	r3, #4
 8001de2:	623b      	str	r3, [r7, #32]
          break;
 8001de4:	e023      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	3308      	adds	r3, #8
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e01e      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	330c      	adds	r3, #12
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e019      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e02:	2304      	movs	r3, #4
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e012      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e10:	2308      	movs	r3, #8
 8001e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	611a      	str	r2, [r3, #16]
          break;
 8001e1a:	e008      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	615a      	str	r2, [r3, #20]
          break;
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2bff      	cmp	r3, #255	; 0xff
 8001e32:	d801      	bhi.n	8001e38 <HAL_GPIO_Init+0xec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	e001      	b.n	8001e3c <HAL_GPIO_Init+0xf0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d802      	bhi.n	8001e4a <HAL_GPIO_Init+0xfe>
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x104>
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	210f      	movs	r1, #15
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	401a      	ands	r2, r3
 8001e62:	6a39      	ldr	r1, [r7, #32]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8096 	beq.w	8001faa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7e:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_GPIO_Init+0x298>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_GPIO_Init+0x298>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6193      	str	r3, [r2, #24]
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x298>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e96:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_GPIO_Init+0x29c>)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x19e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_GPIO_Init+0x2a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x19a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_GPIO_Init+0x2a8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x196>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_GPIO_Init+0x2ac>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x192>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x1a0>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x1a0>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x1a0>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x1a0>
 8001eea:	2300      	movs	r3, #0
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efc:	493a      	ldr	r1, [pc, #232]	; (8001fe8 <HAL_GPIO_Init+0x29c>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4933      	ldr	r1, [pc, #204]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	492e      	ldr	r1, [pc, #184]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4929      	ldr	r1, [pc, #164]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	4924      	ldr	r1, [pc, #144]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	491f      	ldr	r1, [pc, #124]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60cb      	str	r3, [r1, #12]
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4915      	ldr	r1, [pc, #84]	; (8001ffc <HAL_GPIO_Init+0x2b0>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f aed0 	bne.w	8001d60 <HAL_GPIO_Init+0x14>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	372c      	adds	r7, #44	; 0x2c
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	10210000 	.word	0x10210000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	40011400 	.word	0x40011400
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]
 800203a:	4613      	mov	r3, r2
 800203c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204a:	e003      	b.n	8002054 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e11f      	b.n	80022b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe feea 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2224      	movs	r2, #36	; 0x24
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c4:	f000 fcda 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 80020c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4a7b      	ldr	r2, [pc, #492]	; (80022bc <HAL_I2C_Init+0x25c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d807      	bhi.n	80020e4 <HAL_I2C_Init+0x84>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a7a      	ldr	r2, [pc, #488]	; (80022c0 <HAL_I2C_Init+0x260>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	bf94      	ite	ls
 80020dc:	2301      	movls	r3, #1
 80020de:	2300      	movhi	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e006      	b.n	80020f2 <HAL_I2C_Init+0x92>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <HAL_I2C_Init+0x264>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	bf94      	ite	ls
 80020ec:	2301      	movls	r3, #1
 80020ee:	2300      	movhi	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0db      	b.n	80022b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <HAL_I2C_Init+0x268>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0c9b      	lsrs	r3, r3, #18
 8002104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_I2C_Init+0x25c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d802      	bhi.n	8002134 <HAL_I2C_Init+0xd4>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3301      	adds	r3, #1
 8002132:	e009      	b.n	8002148 <HAL_I2C_Init+0xe8>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	4a63      	ldr	r2, [pc, #396]	; (80022cc <HAL_I2C_Init+0x26c>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	3301      	adds	r3, #1
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800215a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4956      	ldr	r1, [pc, #344]	; (80022bc <HAL_I2C_Init+0x25c>)
 8002164:	428b      	cmp	r3, r1
 8002166:	d80d      	bhi.n	8002184 <HAL_I2C_Init+0x124>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e59      	subs	r1, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fbb1 f3f3 	udiv	r3, r1, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	bf38      	it	cc
 8002180:	2304      	movcc	r3, #4
 8002182:	e04f      	b.n	8002224 <HAL_I2C_Init+0x1c4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_I2C_Init+0x150>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_I2C_Init+0x176>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x17e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e022      	b.n	8002224 <HAL_I2C_Init+0x1c4>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <HAL_I2C_Init+0x1a4>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	e00f      	b.n	8002224 <HAL_I2C_Init+0x1c4>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6911      	ldr	r1, [r2, #16]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e26c      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8087 	beq.w	80023fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f0:	4b92      	ldr	r3, [pc, #584]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d00c      	beq.n	8002316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d112      	bne.n	800232e <HAL_RCC_OscConfig+0x5e>
 8002308:	4b8c      	ldr	r3, [pc, #560]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d10b      	bne.n	800232e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4b89      	ldr	r3, [pc, #548]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d06c      	beq.n	80023fc <HAL_RCC_OscConfig+0x12c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d168      	bne.n	80023fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e246      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x76>
 8002338:	4b80      	ldr	r3, [pc, #512]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7f      	ldr	r2, [pc, #508]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e02e      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x98>
 800234e:	4b7b      	ldr	r3, [pc, #492]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7a      	ldr	r2, [pc, #488]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b78      	ldr	r3, [pc, #480]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a77      	ldr	r2, [pc, #476]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0xbc>
 8002372:	4b72      	ldr	r3, [pc, #456]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a71      	ldr	r2, [pc, #452]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6f      	ldr	r3, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6e      	ldr	r2, [pc, #440]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xd4>
 800238c:	4b6b      	ldr	r3, [pc, #428]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6a      	ldr	r2, [pc, #424]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b68      	ldr	r3, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a67      	ldr	r2, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff f936 	bl	800161c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff f932 	bl	800161c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1fa      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe4>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff f922 	bl	800161c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff f91e 	bl	800161c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1e6      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x10c>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240a:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002416:	4b49      	ldr	r3, [pc, #292]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x18c>
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x176>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1ba      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4939      	ldr	r1, [pc, #228]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff f8d7 	bl	800161c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff f8d3 	bl	800161c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e19b      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4927      	ldr	r1, [pc, #156]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_RCC_OscConfig+0x270>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff f8b6 	bl	800161c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b4:	f7ff f8b2 	bl	800161c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e17a      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03a      	beq.n	8002554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d019      	beq.n	800251a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_RCC_OscConfig+0x274>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7ff f896 	bl	800161c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7ff f892 	bl	800161c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e15a      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_RCC_OscConfig+0x26c>)
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 fada 	bl	8002acc <RCC_Delay>
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_RCC_OscConfig+0x274>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7ff f87c 	bl	800161c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002526:	e00f      	b.n	8002548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7ff f878 	bl	800161c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d908      	bls.n	8002548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e140      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	42420000 	.word	0x42420000
 8002544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b9e      	ldr	r3, [pc, #632]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e9      	bne.n	8002528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a6 	beq.w	80026ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b97      	ldr	r3, [pc, #604]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a93      	ldr	r2, [pc, #588]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b91      	ldr	r3, [pc, #580]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d118      	bne.n	80025cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259a:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x4f8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a8a      	ldr	r2, [pc, #552]	; (80027c8 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a6:	f7ff f839 	bl	800161c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ae:	f7ff f835 	bl	800161c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0fd      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x312>
 80025d4:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e02d      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x334>
 80025ea:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	f023 0304 	bic.w	r3, r3, #4
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	e01c      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x356>
 800260c:	4b6d      	ldr	r3, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a6c      	ldr	r2, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a69      	ldr	r2, [pc, #420]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x36e>
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a66      	ldr	r2, [pc, #408]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe ffe9 	bl	800161c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe ffe5 	bl	800161c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0ab      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCC_OscConfig+0x37e>
 8002670:	e014      	b.n	800269c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7fe ffd3 	bl	800161c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe ffcf 	bl	800161c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e095      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8081 	beq.w	80027ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d061      	beq.n	8002788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d146      	bne.n	800275a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_OscConfig+0x4fc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe ffa3 	bl	800161c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe ff9f 	bl	800161c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e067      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d108      	bne.n	8002714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	492d      	ldr	r1, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a19      	ldr	r1, [r3, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	430b      	orrs	r3, r1
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x4fc>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe ff73 	bl	800161c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe ff6f 	bl	800161c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e037      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x46a>
 8002758:	e02f      	b.n	80027ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_RCC_OscConfig+0x4fc>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe ff5c 	bl	800161c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe ff58 	bl	800161c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e020      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x498>
 8002786:	e018      	b.n	80027ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e013      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	42420060 	.word	0x42420060

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0d0      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d910      	bls.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b67      	ldr	r3, [pc, #412]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4965      	ldr	r1, [pc, #404]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800284e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d040      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d115      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e073      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4936      	ldr	r1, [pc, #216]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe feac 	bl	800161c <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fea8 	bl	800161c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e053      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d210      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4922      	ldr	r1, [pc, #136]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4601      	mov	r1, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	fa21 f303 	lsr.w	r3, r1, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1cc>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fe0a 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000
 8002994:	40021000 	.word	0x40021000
 8002998:	080041bc 	.word	0x080041bc
 800299c:	20000060 	.word	0x20000060
 80029a0:	20000064 	.word	0x20000064

080029a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b490      	push	{r4, r7}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ac:	1d3c      	adds	r4, r7, #4
 80029ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x40>
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x46>
 80029e2:	e02d      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e6:	623b      	str	r3, [r7, #32]
      break;
 80029e8:	e02d      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	0c9b      	lsrs	r3, r3, #18
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029f6:	4413      	add	r3, r2
 80029f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0c5b      	lsrs	r3, r3, #17
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a16:	4413      	add	r3, r2
 8002a18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a22:	fb02 f203 	mul.w	r2, r2, r3
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	e004      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	623b      	str	r3, [r7, #32]
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc90      	pop	{r4, r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	080041a8 	.word	0x080041a8
 8002a58:	080041b8 	.word	0x080041b8
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	003d0900 	.word	0x003d0900

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000060 	.word	0x20000060

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff2 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a84:	4601      	mov	r1, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	080041cc 	.word	0x080041cc

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffde 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	0adb      	lsrs	r3, r3, #11
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	080041cc 	.word	0x080041cc

08002acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCC_Delay+0x34>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <RCC_Delay+0x38>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae8:	bf00      	nop
  }
  while (Delay --);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <RCC_Delay+0x1c>
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000060 	.word	0x20000060
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07d      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	61d3      	str	r3, [r2, #28]
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5c:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fd58 	bl	800161c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe fd54 	bl	800161c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e06d      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d02e      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d027      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d014      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fd23 	bl	800161c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fd1f 	bl	800161c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e036      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4917      	ldr	r1, [pc, #92]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	490b      	ldr	r1, [pc, #44]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42420440 	.word	0x42420440

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fb06 	bl	80012ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fc1c 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e03a      	b.n	8002da2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_Base_Start_IT+0x98>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d009      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x58>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d111      	bne.n	8002d90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d010      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	e007      	b.n	8002da0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f839 	bl	8002e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 fb7a 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x24>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d109      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x3e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e015      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x58>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x6a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e05e      	b.n	8002f98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0x82>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee8:	e013      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0x92>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef8:	e00b      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	e003      	b.n	8002f12 <HAL_TIM_PWM_Start+0xaa>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2201      	movs	r2, #1
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fd68 	bl	80039f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_TIM_PWM_Start+0x138>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d107      	bne.n	8002f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_TIM_PWM_Start+0x138>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_TIM_PWM_Start+0xfa>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIM_PWM_Start+0xfa>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_TIM_PWM_Start+0x13c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIM_PWM_Start+0xfa>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <HAL_TIM_PWM_Start+0x140>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d010      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800

08002fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0202 	mvn.w	r2, #2
 8002fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa62 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa55 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa64 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0204 	mvn.w	r2, #4
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa38 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa2b 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fa3a 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b08      	cmp	r3, #8
 8003068:	d122      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b08      	cmp	r3, #8
 8003076:	d11b      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0208 	mvn.w	r2, #8
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2204      	movs	r2, #4
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa0e 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa01 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fa10 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d122      	bne.n	8003104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d11b      	bne.n	8003104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0210 	mvn.w	r2, #16
 80030d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2208      	movs	r2, #8
 80030da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f9e4 	bl	80034b8 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9d7 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f9e6 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0201 	mvn.w	r2, #1
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd ff74 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fcd5 	bl	8003b06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9aa 	bl	80034dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0220 	mvn.w	r2, #32
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fca0 	bl	8003af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0ac      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	f200 809f 	bhi.w	8003324 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003325 	.word	0x08003325
 80031f4:	08003325 	.word	0x08003325
 80031f8:	08003325 	.word	0x08003325
 80031fc:	08003261 	.word	0x08003261
 8003200:	08003325 	.word	0x08003325
 8003204:	08003325 	.word	0x08003325
 8003208:	08003325 	.word	0x08003325
 800320c:	080032a3 	.word	0x080032a3
 8003210:	08003325 	.word	0x08003325
 8003214:	08003325 	.word	0x08003325
 8003218:	08003325 	.word	0x08003325
 800321c:	080032e3 	.word	0x080032e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f9c4 	bl	80035b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e062      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa0a 	bl	8003680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e041      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa53 	bl	8003754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e021      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fa9d 	bl	8003828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e000      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIM_ConfigClockSource+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e0a6      	b.n	800349e <HAL_TIM_ConfigClockSource+0x166>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800336e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d067      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0x120>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d80b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x6c>
 800338c:	2b10      	cmp	r3, #16
 800338e:	d073      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x140>
 8003390:	2b10      	cmp	r3, #16
 8003392:	d802      	bhi.n	800339a <HAL_TIM_ConfigClockSource+0x62>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d06f      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003398:	e078      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800339a:	2b20      	cmp	r3, #32
 800339c:	d06c      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x140>
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d06a      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033a2:	e073      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033a4:	2b70      	cmp	r3, #112	; 0x70
 80033a6:	d00d      	beq.n	80033c4 <HAL_TIM_ConfigClockSource+0x8c>
 80033a8:	2b70      	cmp	r3, #112	; 0x70
 80033aa:	d804      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x7e>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d033      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0xe0>
 80033b0:	2b60      	cmp	r3, #96	; 0x60
 80033b2:	d041      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033b4:	e06a      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d066      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x152>
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d017      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033c2:	e063      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f000 faed 	bl	80039b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e04c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f000 fad6 	bl	80039b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e039      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	461a      	mov	r2, r3
 8003426:	f000 fa4d 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2150      	movs	r1, #80	; 0x50
 8003430:	4618      	mov	r0, r3
 8003432:	f000 faa4 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003436:	e029      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	461a      	mov	r2, r3
 8003446:	f000 fa6b 	bl	8003920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2160      	movs	r1, #96	; 0x60
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fa94 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003456:	e019      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	461a      	mov	r2, r3
 8003466:	f000 fa2d 	bl	80038c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2140      	movs	r1, #64	; 0x40
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa84 	bl	800397e <TIM_ITRx_SetConfig>
      break;
 8003476:	e009      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fa7b 	bl	800397e <TIM_ITRx_SetConfig>
        break;
 8003488:	e000      	b.n	800348c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800348a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a26      	ldr	r2, [pc, #152]	; (80035ac <TIM_Base_SetConfig+0xbc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x30>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <TIM_Base_SetConfig+0xc0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <TIM_Base_SetConfig+0xbc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <TIM_Base_SetConfig+0xc0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <TIM_Base_SetConfig+0xb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d103      	bne.n	8003598 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	615a      	str	r2, [r3, #20]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800

080035b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 0302 	bic.w	r3, r3, #2
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <TIM_OC1_SetConfig+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10c      	bne.n	800362a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0308 	bic.w	r3, r3, #8
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <TIM_OC1_SetConfig+0xc8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d111      	bne.n	8003656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40012c00 	.word	0x40012c00

08003680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <TIM_OC2_SetConfig+0xd0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d10d      	bne.n	80036fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <TIM_OC2_SetConfig+0xd0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d113      	bne.n	800372c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800370a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	40012c00 	.word	0x40012c00

08003754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10d      	bne.n	80037ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <TIM_OC3_SetConfig+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	621a      	str	r2, [r3, #32]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00

08003828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	031b      	lsls	r3, r3, #12
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <TIM_OC4_SetConfig+0x98>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00

080038c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0201 	bic.w	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0210 	bic.w	r2, r3, #16
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800394a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	031b      	lsls	r3, r3, #12
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800395c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	f043 0307 	orr.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4313      	orrs	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e046      	b.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10c      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e03f      	b.n	8003baa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fc62 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa5d 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_UART_IRQHandler+0x52>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f98b 	bl	8003f1a <UART_Receive_IT>
      return;
 8003c04:	e0d1      	b.n	8003daa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80b0 	beq.w	8003d6e <HAL_UART_IRQHandler+0x1ba>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x70>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80a5 	beq.w	8003d6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_UART_IRQHandler+0x90>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_UART_IRQHandler+0xb0>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	f043 0202 	orr.w	r2, r3, #2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_UART_IRQHandler+0xd0>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00f      	beq.n	8003cae <HAL_UART_IRQHandler+0xfa>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_UART_IRQHandler+0xee>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	f043 0208 	orr.w	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d078      	beq.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f925 	bl	8003f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x144>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d031      	beq.n	8003d5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f876 	bl	8003dea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_UART_IRQHandler+0x1fc>)
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd ff95 	bl	8001c60 <HAL_DMA_Abort_IT>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d46:	4610      	mov	r0, r2
 8003d48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4a:	e00e      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f843 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d52:	e00a      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f83f 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	e006      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f83b 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d68:	e01e      	b.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	bf00      	nop
    return;
 8003d6c:	e01c      	b.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_UART_IRQHandler+0x1d6>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f862 	bl	8003e4c <UART_Transmit_IT>
    return;
 8003d88:	e00f      	b.n	8003daa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_UART_IRQHandler+0x1f6>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8a3 	bl	8003eea <UART_EndTransmit_IT>
    return;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_UART_IRQHandler+0x1f6>
    return;
 8003da8:	bf00      	nop
  }
}
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08003e25 	.word	0x08003e25

08003db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e00:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ffca 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b21      	cmp	r3, #33	; 0x21
 8003e5e:	d13e      	bne.n	8003ede <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e68:	d114      	bne.n	8003e94 <UART_Transmit_IT+0x48>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d110      	bne.n	8003e94 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]
 8003e92:	e008      	b.n	8003ea6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6211      	str	r1, [r2, #32]
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10f      	bne.n	8003eda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff52 	bl	8003db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b22      	cmp	r3, #34	; 0x22
 8003f2c:	d170      	bne.n	8004010 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d117      	bne.n	8003f68 <UART_Receive_IT+0x4e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d113      	bne.n	8003f68 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
 8003f66:	e026      	b.n	8003fb6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7a:	d007      	beq.n	8003f8c <UART_Receive_IT+0x72>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <UART_Receive_IT+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e008      	b.n	8003fac <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d120      	bne.n	800400c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0220 	bic.w	r2, r2, #32
 8003fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fedf 	bl	8003dc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e002      	b.n	8004012 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004056:	f023 030c 	bic.w	r3, r3, #12
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <UART_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fd0e 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	e002      	b.n	8004092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fcf6 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <UART_SetConfig+0x118>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	0119      	lsls	r1, r3, #4
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <UART_SetConfig+0x118>)
 80040ca:	fba3 0302 	umull	r0, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2064      	movs	r0, #100	; 0x64
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <UART_SetConfig+0x118>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e8:	4419      	add	r1, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <UART_SetConfig+0x118>)
 8004102:	fba3 0302 	umull	r0, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	; 0x32
 8004114:	4a07      	ldr	r2, [pc, #28]	; (8004134 <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	440a      	add	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40013800 	.word	0x40013800
 8004134:	51eb851f 	.word	0x51eb851f

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	2500      	movs	r5, #0
 800413c:	4e0c      	ldr	r6, [pc, #48]	; (8004170 <__libc_init_array+0x38>)
 800413e:	4c0d      	ldr	r4, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 8004140:	1ba4      	subs	r4, r4, r6
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	42a5      	cmp	r5, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	f000 f822 	bl	8004190 <_init>
 800414c:	2500      	movs	r5, #0
 800414e:	4e0a      	ldr	r6, [pc, #40]	; (8004178 <__libc_init_array+0x40>)
 8004150:	4c0a      	ldr	r4, [pc, #40]	; (800417c <__libc_init_array+0x44>)
 8004152:	1ba4      	subs	r4, r4, r6
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	42a5      	cmp	r5, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004160:	4798      	blx	r3
 8004162:	3501      	adds	r5, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800416a:	4798      	blx	r3
 800416c:	3501      	adds	r5, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	080041d4 	.word	0x080041d4
 8004174:	080041d4 	.word	0x080041d4
 8004178:	080041d4 	.word	0x080041d4
 800417c:	080041d8 	.word	0x080041d8

08004180 <memset>:
 8004180:	4603      	mov	r3, r0
 8004182:	4402      	add	r2, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	f803 1b01 	strb.w	r1, [r3], #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
